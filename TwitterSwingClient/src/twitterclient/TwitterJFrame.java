/*
 * TwitterJFrame.java
 *
 * Created on 01.04.2010, 13:41:15
 */
package twitterclient;

import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.netbeans.saas.twitter.TwitterWhatAreYouDoingService;
import org.netbeans.saas.RestResponse;
import twitter.whatareyoudoingservice.twitterresponse.StatusType;
import twitter.whatareyoudoingservice.twitterresponse.UserType;

/**
 *
 * @author viktor
 */
public class TwitterJFrame extends javax.swing.JFrame {

    private DefaultListModel statuses = new DefaultListModel();
    private DefaultListModel clientStatuses = new DefaultListModel();
    private DefaultListModel repliesOnClientTwits = new DefaultListModel();

    private final int MAX_INPUT_LENGTH = 140;

    /** Creates new form TwitterJFrame */
    public TwitterJFrame() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {

        UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        this.setLocationRelativeTo(null);
        initComponents();
        initUserInfo();
        getTwitsFromTwitter();
        this.jTabbedPaneMain.setTitleAt(0, "All twits");
        this.jTabbedPaneMain.setTitleAt(1, "Your twits");
        this.jTabbedPaneMain.setTitleAt(2, "Replies on your twits");


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneMain = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListAllTwits = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListYourTwits = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListRepliesOnClientTwits = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabelUserIcon = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaUserStatus = new javax.swing.JTextArea();
        jLabelTextLength = new javax.swing.JLabel();
        jButtonUpdate = new javax.swing.JButton();
        jButtonUpdate1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple twitter RESTfull client");
        setResizable(false);

        jTabbedPaneMain.setToolTipText("");
        jTabbedPaneMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPaneMain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneMainStateChanged(evt);
            }
        });

        jListAllTwits.setModel(statuses);
        jListAllTwits.setCellRenderer(new Item());
        jScrollPane1.setViewportView(jListAllTwits);

        jTabbedPaneMain.addTab("tab1", jScrollPane1);

        jListYourTwits.setModel(clientStatuses);
        jListYourTwits.setCellRenderer(new Item());
        jScrollPane3.setViewportView(jListYourTwits);

        jTabbedPaneMain.addTab("tab2", jScrollPane3);

        jListRepliesOnClientTwits.setModel(repliesOnClientTwits);
        jListRepliesOnClientTwits.setCellRenderer(new Item());
        jScrollPane4.setViewportView(jListRepliesOnClientTwits);

        jTabbedPaneMain.addTab("tab3", jScrollPane4);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelUserIcon.setText("Icon");
        jLabelUserIcon.setAlignmentY(0.0F);
        jLabelUserIcon.setPreferredSize(new java.awt.Dimension(48, 48));

        jTextAreaUserStatus.setColumns(20);
        jTextAreaUserStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextAreaUserStatus.setLineWrap(true);
        jTextAreaUserStatus.setRows(5);
        jTextAreaUserStatus.setText("Test status");
        jTextAreaUserStatus.setWrapStyleWord(true);
        jTextAreaUserStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaUserStatusKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaUserStatus);

        jLabelTextLength.setForeground(new java.awt.Color(0, 0, 204));
        jLabelTextLength.setText("140");
        jLabelTextLength.setName("lblTextCount"); // NOI18N

        jButtonUpdate.setText("Send twit");
        jButtonUpdate.setName("btnUpdate"); // NOI18N
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonUpdate1.setText("Update all");
        jButtonUpdate1.setActionCommand("");
        jButtonUpdate1.setAlignmentY(0.0F);
        jButtonUpdate1.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jButtonUpdate1.setName("btnUpdate"); // NOI18N
        jButtonUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdate1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Last twit here:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelUserIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonUpdate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonUpdate))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelTextLength, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jLabelUserIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelTextLength, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonUpdate1)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPaneMain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneMain.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed

        try {

            String status = jTextAreaUserStatus.getText().trim();
            String inReplyToStatusId = null;
            String format1 = "xml";

            RestResponse result1 = TwitterWhatAreYouDoingService.updateStatus(status, inReplyToStatusId, format1);
            if (result1.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.StatusType.class) instanceof twitter.whatareyoudoingservice.twitterresponse.StatusType) {
                twitter.whatareyoudoingservice.twitterresponse.StatusType result1Obj = result1.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.StatusType.class);
            } else if (result1.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.NilClasses) {
                twitter.whatareyoudoingservice.twitterresponse.NilClasses result1Obj = result1.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButtonUpdateActionPerformed

    /**
     * On chanhe ivent for controlling the user not to input more that 140 symbols.
     * 
     * @param evt
     */
    private void jTextAreaUserStatusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaUserStatusKeyPressed

        jLabelTextLength.setText(String.valueOf(MAX_INPUT_LENGTH - jTextAreaUserStatus.getText().length()));

        if ((MAX_INPUT_LENGTH - jTextAreaUserStatus.getText().length()) < 0) {
            jLabelTextLength.setForeground(new java.awt.Color(204, 0, 0));
            jButtonUpdate.setEnabled(false);
        } else {
            jLabelTextLength.setForeground(new java.awt.Color(0, 0, 204));
            jButtonUpdate.setEnabled(true);
        }

    }//GEN-LAST:event_jTextAreaUserStatusKeyPressed

    private void jTabbedPaneMainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneMainStateChanged
        
        
        /* Too slow =)
        if ( jTabbedPaneMain.getSelectedIndex() == 1 ) {
               getClientsTwits();
        }

        if ( jTabbedPaneMain.getSelectedIndex() == 2 ) {
               getRepliesOnClientsTwits();
        }
         
         */
    }//GEN-LAST:event_jTabbedPaneMainStateChanged

    /**
     * 
     * @param evt
     */
    private void jButtonUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdate1ActionPerformed
        // TODO add your handling code here:
        getTwitsOnce();
    }//GEN-LAST:event_jButtonUpdate1ActionPerformed

    /**
     * Initializing user information.
     */
    private void initUserInfo() {

        try {
            String since = null;
            String sinceId = null;
            String page = null;
            String count = "1";
            String format = "xml";

            RestResponse result = TwitterWhatAreYouDoingService.getUserTimeline(since, sinceId, page, count, format);
            if (result.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {
                twitter.whatareyoudoingservice.twitterresponse.Statuses resultObj = result.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);
            } else if (result.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.NilClasses) {
                twitter.whatareyoudoingservice.twitterresponse.NilClasses resultObj = result.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class);
            }

            if (result.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {

                twitter.whatareyoudoingservice.twitterresponse.Statuses resultObj = result.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);

                StatusType st = resultObj.getStatus().get(0);
                jTextAreaUserStatus.setText(st.getText().trim());
                UserType user = st.getUser();
                String iconSrc = user.getProfileImageUrl();
                URL iconUrl = new URL(iconSrc);
                ImageIcon icon = new ImageIcon(iconUrl, user.getScreenName());
                jLabelUserIcon.setIcon(icon);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private class MyTime extends TimerTask {

        @Override
        public void run() {

            try {
                String since2 = null;
                String sinceId1 = null;
                String page1 = null;
                String count1 = "10";
                String format2 = "xml";

                RestResponse result2 = TwitterWhatAreYouDoingService.getFriendsTimeline(since2, sinceId1, page1, count1, format2);
                if (result2.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {
                    twitter.whatareyoudoingservice.twitterresponse.Statuses result2Obj = result2.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);
                } else if (result2.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.NilClasses) {
                    twitter.whatareyoudoingservice.twitterresponse.NilClasses result2Obj = result2.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class);
                }


                if (result2.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {

                    twitter.whatareyoudoingservice.twitterresponse.Statuses result2Obj = result2.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);
                    statuses.clear();
                    for (final StatusType st : result2Obj.getStatus()) {
                        SwingUtilities.invokeLater(new Runnable() {

                            public void run() {
                                statuses.addElement(st);
                            }
                        });
                    }
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     *  Getting twits of the client.
     */
    private void getClientsTwits() {

        try {
            String since4 = null;
            String sinceId2 = null;
            String page2 = null;
            String count2 = "10";
            String format3 = "xml";

            RestResponse result3 = TwitterWhatAreYouDoingService.getUserTimeline(since4, sinceId2, page2, count2, format3);
            if (result3.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {
                twitter.whatareyoudoingservice.twitterresponse.Statuses result3Obj = result3.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);
            } else if (result3.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.NilClasses) {
                twitter.whatareyoudoingservice.twitterresponse.NilClasses result3Obj = result3.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class);
            }

            if (result3.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {

                twitter.whatareyoudoingservice.twitterresponse.Statuses result2Obj = result3.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);

                clientStatuses.clear();
                for (final StatusType st : result2Obj.getStatus()) {

                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            clientStatuses.addElement(st);
                        }
                    });
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    /**
     * Get replies on client's twits.
     */
    private void getRepliesOnClientsTwits() {


        try {
            String since6 = null;
            String sinceId3 = null;
            String page3 = "1";
            String format4 = "xml";

            RestResponse result4 = TwitterWhatAreYouDoingService.getReplies(since6, sinceId3, page3, format4);
            if (result4.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {
                twitter.whatareyoudoingservice.twitterresponse.Statuses result4Obj = result4.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);
            } else if (result4.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.NilClasses) {
                twitter.whatareyoudoingservice.twitterresponse.NilClasses result4Obj = result4.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.NilClasses.class);
            }
            if (result4.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class) instanceof twitter.whatareyoudoingservice.twitterresponse.Statuses) {

                twitter.whatareyoudoingservice.twitterresponse.Statuses result2Obj = result4.getDataAsObject(twitter.whatareyoudoingservice.twitterresponse.Statuses.class);

                repliesOnClientTwits.clear();
                for (final StatusType st : result2Obj.getStatus()) {

                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            repliesOnClientTwits.addElement(st);
                        }
                    });
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }

    /**
     * Twits that at get once.
     */
    private void getTwitsOnce() {

        //get twits of the client
        getClientsTwits();

        //getting replies on your twits
        getRepliesOnClientsTwits();
    }
    
    /**
     *  Getting twits from twitter and adding them to the swing components.
     */
    private void getTwitsFromTwitter() {

        // twits of the frieds
        Timer t = new Timer("Twitter Updater", false);
        t.scheduleAtFixedRate(new MyTime(), 1500, 75000);   
        
        getTwitsOnce();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new TwitterJFrame().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonUpdate1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelTextLength;
    private javax.swing.JLabel jLabelUserIcon;
    private javax.swing.JList jListAllTwits;
    private javax.swing.JList jListRepliesOnClientTwits;
    private javax.swing.JList jListYourTwits;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPaneMain;
    private javax.swing.JTextArea jTextAreaUserStatus;
    // End of variables declaration//GEN-END:variables
}
